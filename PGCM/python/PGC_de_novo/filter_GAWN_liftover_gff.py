"""
Goes over a gff3 file generated by GAWN
and produces a list of qualified genes
and mRNAs - those without introns longer
than X and with % identity > Y.
Also guarantees only one gene with one
mRNA from each transcript is kept.
"""

from __future__ import print_function
import gffutils
import sys
from time import time
from os import remove

in_gff = sys.argv[1]
min_identity = int(sys.argv[2])
max_intron = int(sys.argv[3])

db_path = "tmp_%s.sqlite3" % time()
gff_db = gffutils.create_db(in_gff, db_path, force=False, merge_strategy="create_unique", verbose=True)
gff = gffutils.FeatureDB(db_path)

def choose_mrna(mrna1, mrna2, min_identity, max_intron):
  """
  Given two mRNA features, chooses
  the better one. If one of the
  mRNAs doesn't qualify, it is rejected.
  If both qualify, chooses the one with
  longer total exons.
  If both don't qualify - returns None.
  If mrna1 or mrna2 is None - return the other
  """
  best_mrna = None
  best_mrna_length = 0
  for mrna in [mrna1, mrna2]:
    if not mrna:
      continue
    perc_identity = float(mrna['identity'][0])
    if perc_identity < min_identity:
      continue
    elif best_mrna and perc_identity < float(best_mrna['identity'][0]):
      continue
    # check if contains long introns and calculate total exons length
    exons = gff.children(mrna, featuretype='exon', order_by='start')
    total_exon_len = 0
    intron_len = []
    prev_end = None
    for ex in exons:
      start = ex.start
      end = ex.end
      total_exon_len += end - start
      if prev_end:
        intron_len.append(start - prev_end)
      prev_end = end
    if intron_len:
      longest_intron = max(intron_len)
      if longest_intron > max_intron:
        continue
    if total_exon_len < best_mrna_length:
      continue
    # if we get here, it means this is the best mRNA so far
    best_mrna = mrna
    best_mrna_length = total_exon_len
  return best_mrna

genes = {}
for gene in gff.features_of_type('gene'):
  gene_name = gene['Name'][0]
  # choose best mRNA for gene (if any qualifies)
  best_mrna = None
  best_mrna_length = 0
  for mrna in gff.children(gene, featuretype='mRNA'):
    best_mrna = choose_mrna(best_mrna, mrna, min_identity, max_intron)
  if best_mrna:
    if gene_name not in genes:
      genes[gene_name] = [gene, best_mrna]
    else:
      # we get here if there is more than one gene from the same transcript
      # we choose the gene with the better mRNA
      better_mrna = choose_mrna(genes[gene_name][1], best_mrna, min_identity, max_intron)
      if better_mrna == best_mrna:
        genes[gene_name] = [gene, best_mrna]

for gene_name in genes:
  gene, mrna = genes[gene_name]
  print(gene['ID'][0] + "\n" + mrna['ID'][0])

remove(db_path)
